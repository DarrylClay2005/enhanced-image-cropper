#!/usr/bin/env python3
"""
Enhanced Image Cropper v1.0.2
A comprehensive photo editing application with modern features
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, colorchooser
import customtkinter as ctk
from PIL import Image, ImageTk, ImageEnhance, ImageFilter, ImageOps
import cv2
import numpy as np
import os
import json
from datetime import datetime
import math
from scipy import ndimage
from skimage import restoration, exposure, transform
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# Set theme and appearance
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

class EnhancedImageCropper:
    def __init__(self):
        self.root = ctk.CTk()
        self.root.title("Enhanced Image Cropper v1.0.2")
        self.root.geometry("1400x900")
        self.root.minsize(1200, 800)
        
        # Initialize variables
        self.original_image = None
        self.current_image = None
        self.displayed_image = None
        self.tk_image = None
        self.crop_coords = None
        self.rect = None
        self.start_x = None
        self.start_y = None
        self.zoom_factor = 1.0
        self.rotation_angle = 0
        self.history = []
        self.history_index = -1
        self.templates = self.load_templates()
        
        # Setup UI
        self.setup_ui()
        self.setup_canvas()
        self.load_presets()
        
    def setup_ui(self):
        """Setup the modern user interface"""
        
        # Main container
        main_container = ctk.CTkFrame(self.root)
        main_container.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Left panel for tools
        self.left_panel = ctk.CTkFrame(main_container, width=280)
        self.left_panel.pack(side="left", fill="y", padx=(0, 10))
        self.left_panel.pack_propagate(False)
        
        # Center panel for image display
        self.center_panel = ctk.CTkFrame(main_container)
        self.center_panel.pack(side="left", fill="both", expand=True, padx=(0, 10))\n        
        # Right panel for properties
        self.right_panel = ctk.CTkFrame(main_container, width=250)
        self.right_panel.pack(side="right", fill="y")
        self.right_panel.pack_propagate(False)
        
        self.setup_left_panel()\n        self.setup_center_panel()\n        self.setup_right_panel()\n        
    def setup_left_panel(self):\n        \"\"\"Setup left panel with editing tools\"\"\"\n        \n        # File Operations\n        file_frame = ctk.CTkFrame(self.left_panel)\n        file_frame.pack(fill="x", padx=10, pady=10)\n        \n        ctk.CTkLabel(file_frame, text="üìÅ File Operations", font=ctk.CTkFont(size=16, weight="bold")).pack(pady=5)\n        \n        ctk.CTkButton(file_frame, text="Open Image", command=self.open_image).pack(fill="x", pady=2)\n        ctk.CTkButton(file_frame, text="Save Image", command=self.save_image).pack(fill="x", pady=2)\n        ctk.CTkButton(file_frame, text="Export As...", command=self.export_image).pack(fill="x", pady=2)\n        \n        # Crop Templates\n        template_frame = ctk.CTkFrame(self.left_panel)\n        template_frame.pack(fill="x", padx=10, pady=10)\n        \n        ctk.CTkLabel(template_frame, text="üìê Crop Templates", font=ctk.CTkFont(size=16, weight="bold")).pack(pady=5)\n        \n        self.template_var = ctk.StringVar(value="Custom")\n        template_options = ["Custom", "Square (1:1)", "Portrait (4:5)", "Landscape (16:9)", \n                           "Instagram Post (1:1)", "Instagram Story (9:16)", "Facebook Cover (16:9)",\n                           "Twitter Header (3:1)", "YouTube Thumbnail (16:9)"]\n        \n        self.template_menu = ctk.CTkOptionMenu(template_frame, variable=self.template_var, \n                                              values=template_options, command=self.apply_template)\n        self.template_menu.pack(fill="x", pady=2)\n        \n        # Custom dimensions\n        dim_frame = ctk.CTkFrame(template_frame)\n        dim_frame.pack(fill="x", pady=5)\n        \n        ctk.CTkLabel(dim_frame, text="Custom Size:").pack()\n        dim_inner = ctk.CTkFrame(dim_frame)\n        dim_inner.pack(fill="x", pady=2)\n        \n        self.width_entry = ctk.CTkEntry(dim_inner, placeholder_text="Width", width=60)\n        self.width_entry.pack(side="left", padx=2)\n        \n        ctk.CTkLabel(dim_inner, text="√ó").pack(side="left", padx=2)\n        \n        self.height_entry = ctk.CTkEntry(dim_inner, placeholder_text="Height", width=60)\n        self.height_entry.pack(side="left", padx=2)\n        \n        ctk.CTkButton(template_frame, text="Apply Custom Size", command=self.apply_custom_dimensions).pack(fill="x", pady=2)\n        \n        # Basic Operations\n        basic_frame = ctk.CTkFrame(self.left_panel)\n        basic_frame.pack(fill="x", padx=10, pady=10)\n        \n        ctk.CTkLabel(basic_frame, text="‚úÇÔ∏è Basic Operations", font=ctk.CTkFont(size=16, weight="bold")).pack(pady=5)\n        \n        ctk.CTkButton(basic_frame, text="Crop Selection", command=self.crop_image).pack(fill="x", pady=2)\n        ctk.CTkButton(basic_frame, text="Reset Image", command=self.reset_image).pack(fill="x", pady=2)\n        ctk.CTkButton(basic_frame, text="Undo", command=self.undo).pack(fill="x", pady=2)\n        ctk.CTkButton(basic_frame, text="Redo", command=self.redo).pack(fill="x", pady=2)\n        \n        # Transform Operations\n        transform_frame = ctk.CTkFrame(self.left_panel)\n        transform_frame.pack(fill="x", padx=10, pady=10)\n        \n        ctk.CTkLabel(transform_frame, text="üîÑ Transform", font=ctk.CTkFont(size=16, weight="bold")).pack(pady=5)\n        \n        # Rotation\n        rot_frame = ctk.CTkFrame(transform_frame)\n        rot_frame.pack(fill="x", pady=5)\n        \n        ctk.CTkLabel(rot_frame, text="Rotation:").pack()\n        self.rotation_slider = ctk.CTkSlider(rot_frame, from_=-180, to=180, command=self.rotate_image)\n        self.rotation_slider.pack(fill="x", pady=2)\n        self.rotation_slider.set(0)\n        \n        rot_buttons = ctk.CTkFrame(rot_frame)\n        rot_buttons.pack(fill="x", pady=2)\n        \n        ctk.CTkButton(rot_buttons, text="‚Ü∂ 90¬∞", width=60, command=lambda: self.quick_rotate(-90)).pack(side="left", padx=2)\n        ctk.CTkButton(rot_buttons, text="‚Ü∑ 90¬∞", width=60, command=lambda: self.quick_rotate(90)).pack(side="left", padx=2)\n        \n        # Flip operations\n        flip_frame = ctk.CTkFrame(transform_frame)\n        flip_frame.pack(fill="x", pady=5)\n        \n        ctk.CTkLabel(flip_frame, text="Flip:").pack()\n        flip_buttons = ctk.CTkFrame(flip_frame)\n        flip_buttons.pack(fill="x", pady=2)\n        \n        ctk.CTkButton(flip_buttons, text="‚Üî Horizontal", width=70, command=self.flip_horizontal).pack(side="left", padx=2)\n        ctk.CTkButton(flip_buttons, text="‚Üï Vertical", width=70, command=self.flip_vertical).pack(side="left", padx=2)\n        \n    def setup_center_panel(self):\n        \"\"\"Setup center panel with image display and controls\"\"\"\n        \n        # Top toolbar\n        toolbar = ctk.CTkFrame(self.center_panel, height=50)\n        toolbar.pack(fill="x", padx=10, pady=(10, 5))\n        toolbar.pack_propagate(False)\n        \n        # Zoom controls\n        zoom_frame = ctk.CTkFrame(toolbar)\n        zoom_frame.pack(side="left", padx=10, pady=10)\n        \n        ctk.CTkButton(zoom_frame, text="üîç+", width=40, command=self.zoom_in).pack(side="left", padx=2)\n        ctk.CTkButton(zoom_frame, text="üîç-", width=40, command=self.zoom_out).pack(side="left", padx=2)\n        ctk.CTkButton(zoom_frame, text="Fit", width=40, command=self.fit_to_window).pack(side="left", padx=2)\n        \n        self.zoom_label = ctk.CTkLabel(toolbar, text="100%")\n        self.zoom_label.pack(side="left", padx=10)\n        \n        # Image info\n        self.info_label = ctk.CTkLabel(toolbar, text="No image loaded")\n        self.info_label.pack(side="right", padx=10)\n        \n        # Canvas container with scrollbars\n        canvas_container = ctk.CTkFrame(self.center_panel)\n        canvas_container.pack(fill="both", expand=True, padx=10, pady=(0, 10))\n        \n        # Create canvas with scrollbars\n        self.canvas = tk.Canvas(canvas_container, bg="#2b2b2b", highlightthickness=0)\n        \n        v_scrollbar = ctk.CTkScrollbar(canvas_container, orientation="vertical", command=self.canvas.yview)\n        h_scrollbar = ctk.CTkScrollbar(canvas_container, orientation="horizontal", command=self.canvas.xview)\n        \n        self.canvas.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)\n        \n        v_scrollbar.pack(side="right", fill="y")\n        h_scrollbar.pack(side="bottom", fill="x")\n        self.canvas.pack(side="left", fill="both", expand=True)\n        \n    def setup_right_panel(self):\n        \"\"\"Setup right panel with image adjustments\"\"\"\n        \n        # Image Adjustments\n        adj_frame = ctk.CTkFrame(self.right_panel)\n        adj_frame.pack(fill="x", padx=10, pady=10)\n        \n        ctk.CTkLabel(adj_frame, text="üé® Adjustments", font=ctk.CTkFont(size=16, weight="bold")).pack(pady=5)\n        \n        # Brightness\n        brightness_frame = ctk.CTkFrame(adj_frame)\n        brightness_frame.pack(fill="x", pady=5)\n        \n        ctk.CTkLabel(brightness_frame, text="Brightness:").pack()\n        self.brightness_slider = ctk.CTkSlider(brightness_frame, from_=0.1, to=3.0, command=self.adjust_brightness)\n        self.brightness_slider.pack(fill="x", pady=2)\n        self.brightness_slider.set(1.0)\n        \n        # Contrast\n        contrast_frame = ctk.CTkFrame(adj_frame)\n        contrast_frame.pack(fill="x", pady=5)\n        \n        ctk.CTkLabel(contrast_frame, text="Contrast:").pack()\n        self.contrast_slider = ctk.CTkSlider(contrast_frame, from_=0.1, to=3.0, command=self.adjust_contrast)\n        self.contrast_slider.pack(fill="x", pady=2)\n        self.contrast_slider.set(1.0)\n        \n        # Saturation\n        saturation_frame = ctk.CTkFrame(adj_frame)\n        saturation_frame.pack(fill="x", pady=5)\n        \n        ctk.CTkLabel(saturation_frame, text="Saturation:").pack()\n        self.saturation_slider = ctk.CTkSlider(saturation_frame, from_=0.0, to=2.0, command=self.adjust_saturation)\n        self.saturation_slider.pack(fill="x", pady=2)\n        self.saturation_slider.set(1.0)\n        \n        # Sharpness\n        sharpness_frame = ctk.CTkFrame(adj_frame)\n        sharpness_frame.pack(fill="x", pady=5)\n        \n        ctk.CTkLabel(sharpness_frame, text="Sharpness:").pack()\n        self.sharpness_slider = ctk.CTkSlider(sharpness_frame, from_=0.0, to=3.0, command=self.adjust_sharpness)\n        self.sharpness_slider.pack(fill="x", pady=2)\n        self.sharpness_slider.set(1.0)\n        \n        # Filters\n        filter_frame = ctk.CTkFrame(self.right_panel)\n        filter_frame.pack(fill="x", padx=10, pady=10)\n        \n        ctk.CTkLabel(filter_frame, text="üé≠ Filters", font=ctk.CTkFont(size=16, weight="bold")).pack(pady=5)\n        \n        filter_buttons = ["Blur", "Sharpen", "Edge Enhance", "Smooth", "Emboss", "Find Edges"]\n        for filter_name in filter_buttons:\n            ctk.CTkButton(filter_frame, text=filter_name, \n                         command=lambda f=filter_name: self.apply_filter(f)).pack(fill="x", pady=1)\n        \n        # Advanced Features\n        advanced_frame = ctk.CTkFrame(self.right_panel)\n        advanced_frame.pack(fill="x", padx=10, pady=10)\n        \n        ctk.CTkLabel(advanced_frame, text="‚ö° Advanced", font=ctk.CTkFont(size=16, weight="bold")).pack(pady=5)\n        \n        ctk.CTkButton(advanced_frame, text="Auto Enhance", command=self.auto_enhance).pack(fill="x", pady=2)\n        ctk.CTkButton(advanced_frame, text="Noise Reduction", command=self.reduce_noise).pack(fill="x", pady=2)\n        ctk.CTkButton(advanced_frame, text="Histogram Equalization", command=self.histogram_equalization).pack(fill="x", pady=2)\n        ctk.CTkButton(advanced_frame, text="Color Balance", command=self.color_balance).pack(fill="x", pady=2)\n        ctk.CTkButton(advanced_frame, text="Perspective Correction", command=self.perspective_correction).pack(fill="x", pady=2)\n        \n        # Batch Operations\n        batch_frame = ctk.CTkFrame(self.right_panel)\n        batch_frame.pack(fill="x", padx=10, pady=10)\n        \n        ctk.CTkLabel(batch_frame, text="üì¶ Batch Operations", font=ctk.CTkFont(size=16, weight="bold")).pack(pady=5)\n        \n        ctk.CTkButton(batch_frame, text="Batch Crop", command=self.batch_crop).pack(fill="x", pady=2)\n        ctk.CTkButton(batch_frame, text="Batch Resize", command=self.batch_resize).pack(fill="x", pady=2)\n        \n    def setup_canvas(self):\n        \"\"\"Setup canvas event bindings\"\"\"\n        self.canvas.bind("<ButtonPress-1>", self.on_button_press)\n        self.canvas.bind("<B1-Motion>", self.on_mouse_drag)\n        self.canvas.bind("<ButtonRelease-1>", self.on_button_release)\n        self.canvas.bind("<MouseWheel>", self.on_mouse_wheel)\n        self.canvas.bind("<Button-4>", self.on_mouse_wheel)\n        self.canvas.bind("<Button-5>", self.on_mouse_wheel)\n        \n    # File Operations\n    def open_image(self):\n        \"\"\"Open an image file\"\"\"\n        file_types = [\n            ("Image files", "*.jpg *.jpeg *.png *.bmp *.tiff *.gif *.webp"),\n            ("JPEG files", "*.jpg *.jpeg"),\n            ("PNG files", "*.png"),\n            ("All files", "*.*")\n        ]\n        \n        file_path = filedialog.askopenfilename(filetypes=file_types)\n        if file_path:\n            try:\n                self.original_image = Image.open(file_path)\n                self.current_image = self.original_image.copy()\n                self.history = [self.original_image.copy()]\n                self.history_index = 0\n                self.display_image()\n                self.update_info_label()\n                messagebox.showinfo("Success", "Image loaded successfully!")\n            except Exception as e:\n                messagebox.showerror("Error", f"Failed to open image: {str(e)}")\n    \n    def save_image(self):\n        \"\"\"Save the current image\"\"\"\n        if self.current_image is None:\n            messagebox.showwarning("Warning", "No image to save")\n            return\n            \n        file_types = [\n            ("PNG files", "*.png"),\n            ("JPEG files", "*.jpg"),\n            ("BMP files", "*.bmp"),\n            ("TIFF files", "*.tiff"),\n            ("WebP files", "*.webp")\n        ]\n        \n        file_path = filedialog.asksaveasfilename(\n            defaultextension=".png",\n            filetypes=file_types\n        )\n        \n        if file_path:\n            try:\n                # Ensure RGB mode for JPEG\n                if file_path.lower().endswith(('.jpg', '.jpeg')):\n                    if self.current_image.mode in ('RGBA', 'LA', 'P'):\n                        self.current_image = self.current_image.convert('RGB')\n                \n                self.current_image.save(file_path, quality=95, optimize=True)\n                messagebox.showinfo("Success", f"Image saved to {file_path}")\n            except Exception as e:\n                messagebox.showerror("Error", f"Failed to save image: {str(e)}")\n    \n    def export_image(self):\n        \"\"\"Export image with additional options\"\"\"\n        if self.current_image is None:\n            messagebox.showwarning("Warning", "No image to export")\n            return\n            \n        export_window = ctk.CTkToplevel(self.root)\n        export_window.title("Export Options")\n        export_window.geometry("400x300")\n        export_window.transient(self.root)\n        export_window.grab_set()\n        \n        # Quality settings\n        quality_frame = ctk.CTkFrame(export_window)\n        quality_frame.pack(fill="x", padx=20, pady=10)\n        \n        ctk.CTkLabel(quality_frame, text="Quality:").pack()\n        quality_slider = ctk.CTkSlider(quality_frame, from_=1, to=100)\n        quality_slider.pack(fill="x", pady=5)\n        quality_slider.set(95)\n        \n        # Format selection\n        format_frame = ctk.CTkFrame(export_window)\n        format_frame.pack(fill="x", padx=20, pady=10)\n        \n        ctk.CTkLabel(format_frame, text="Format:").pack()\n        format_var = ctk.StringVar(value="PNG")\n        format_menu = ctk.CTkOptionMenu(format_frame, variable=format_var, \n                                       values=["PNG", "JPEG", "WebP", "TIFF", "BMP"])\n        format_menu.pack(fill="x", pady=5)\n        \n        def do_export():\n            file_path = filedialog.asksaveasfilename(\n                defaultextension=f\".{format_var.get().lower()}\",\n                filetypes=[(f\"{format_var.get()} files\", f\"*.{format_var.get().lower()}\")]\n            )\n            \n            if file_path:\n                try:\n                    img = self.current_image.copy()\n                    if format_var.get() == "JPEG" and img.mode in ('RGBA', 'LA', 'P'):\n                        img = img.convert('RGB')\n                    \n                    img.save(file_path, quality=int(quality_slider.get()), optimize=True)\n                    export_window.destroy()\n                    messagebox.showinfo("Success", f"Image exported to {file_path}")\n                except Exception as e:\n                    messagebox.showerror("Error", f"Failed to export image: {str(e)}")\n        \n        ctk.CTkButton(export_window, text="Export", command=do_export).pack(pady=20)\n        \n    # Image Display and Manipulation\n    def display_image(self):\n        \"\"\"Display the current image on canvas\"\"\"\n        if self.current_image is None:\n            return\n            \n        # Calculate display size\n        canvas_width = self.canvas.winfo_width()\n        canvas_height = self.canvas.winfo_height()\n        \n        if canvas_width <= 1 or canvas_height <= 1:\n            self.root.after(100, self.display_image)\n            return\n            \n        img_width, img_height = self.current_image.size\n        \n        # Apply zoom\n        display_width = int(img_width * self.zoom_factor)\n        display_height = int(img_height * self.zoom_factor)\n        \n        # Resize image for display\n        self.displayed_image = self.current_image.resize(\n            (display_width, display_height), \n            Image.Resampling.LANCZOS\n        )\n        \n        # Convert to PhotoImage\n        self.tk_image = ImageTk.PhotoImage(self.displayed_image)\n        \n        # Clear canvas and display image\n        self.canvas.delete("all")\n        self.canvas.create_image(0, 0, anchor="nw", image=self.tk_image, tags="image")\n        \n        # Update scroll region\n        self.canvas.configure(scrollregion=self.canvas.bbox("all"))\n        \n        self.update_zoom_label()\n    \n    def update_info_label(self):\n        \"\"\"Update image information label\"\"\"\n        if self.current_image:\n            width, height = self.current_image.size\n            mode = self.current_image.mode\n            self.info_label.configure(text=f"{width} √ó {height} | {mode}")\n        else:\n            self.info_label.configure(text="No image loaded")\n    \n    def update_zoom_label(self):\n        \"\"\"Update zoom percentage label\"\"\"\n        zoom_percent = int(self.zoom_factor * 100)\n        self.zoom_label.configure(text=f"{zoom_percent}%")\n    \n    # Continue in next part...\n
